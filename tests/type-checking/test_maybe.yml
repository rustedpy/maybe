---
# reveal_type(res3) # N: Revealed type is "maybe.maybe.Nothing"
- case: failure_lash
  disable_cache: false
  main: |
    from typing import Callable, List, Optional

    from maybe import Maybe, Some, Nothing


    res1: Maybe[str] = Some('hello')
    reveal_type(res1) # N: Revealed type is "Union[maybe.maybe.Some[builtins.str], maybe.maybe.Nothing]"
    if isinstance(res1, Some):
        some: Some[str] = res1
        reveal_type(some) # N: Revealed type is "maybe.maybe.Some[builtins.str]"
        someValue: str = res1.some()
        reveal_type(someValue) # N: Revealed type is "builtins.str"
        mapped_to_float: float = res1.map_or(1.0, lambda s: len(s) * 1.5)
        reveal_type(mapped_to_float) # N: Revealed type is "builtins.float"
    else:
        nothing: Nothing = res1
        reveal_type(nothing) # N: Revealed type is "maybe.maybe.Nothing"

    # Test constructor functions
    res2 = Some(42)
    reveal_type(res2) # N: Revealed type is "maybe.maybe.Some[builtins.int]"
    res3 = Nothing()
    reveal_type(res3) # N: Revealed type is "maybe.maybe.Nothing"

    res4 = Some(4)
    add1: Callable[[int], Maybe[int]] = lambda i: Some(i + 1)
    toint: Callable[[str], Maybe[int]] = lambda i: Some(int(i))
    res5 = res4.and_then(add1)
    reveal_type(res5) # N: Revealed type is "Union[maybe.maybe.Some[builtins.int], maybe.maybe.Nothing]"
    res6 = res4.or_else(toint)
    reveal_type(res6) # N: Revealed type is "maybe.maybe.Some[builtins.int]"

- case: covariance_pre310
  skip: "sys.version_info >= (3, 10)"
  disable_cache: false
  main: |
    from maybe import Maybe, Some, Nothing

    some_int: Some[int] = Some(42)
    some_float: Some[float] = some_int
    some_int = some_float  # E: Incompatible types in assignment (expression has type "Some[float]", variable has type "Some[int]")  [assignment]

    nothing: Nothing = Nothing()

    maybe_int: Maybe[int] = some_int or nothing
    maybe_float: Maybe[float] = maybe_int
    maybe_int = maybe_float  # E: Incompatible types in assignment (expression has type "Union[Some[float], Nothing]", variable has type "Union[Some[int], Nothing]")  [assignment]

- case: covariance
  skip: "sys.version_info < (3, 10)"
  disable_cache: false
  main: |
    import sys
    from maybe import Maybe, Some, Nothing

    some_int: Some[int] = Some(42)
    some_float: Some[float] = some_int
    some_int = some_float  # E: Incompatible types in assignment (expression has type "Some[float]", variable has type "Some[int]")  [assignment]

    nothing: Nothing = Nothing()

    maybe_int: Maybe[int] = some_int or nothing
    maybe_float: Maybe[float] = maybe_int
    maybe_int = maybe_float  # E: Incompatible types in assignment (expression has type "Some[float] | Nothing", variable has type "Some[int] | Nothing")  [assignment]

- case: map_ok
  disable_cache: false
  main: |
    from maybe import Maybe, Some, Nothing

    s = Some("42")
    reveal_type(s.map(int))  # N: Revealed type is "maybe.maybe.Some[builtins.int]"

    n = Nothing()
    reveal_type(n.map(int))  # N: Revealed type is "maybe.maybe.Nothing"

- case: map_maybe
  disable_cache: false
  main: |
    from maybe import Maybe, Some

    greeting: Maybe[str] = Some("Hello")

    personalized_greeting = greeting.map(lambda g: f"{g}, John")
    reveal_type(personalized_greeting) # N: Revealed type is "Union[maybe.maybe.Some[builtins.str], maybe.maybe.Nothing]"

    some = personalized_greeting.some()
    reveal_type(some) # N: Revealed type is "Union[builtins.str, None]"

- case: map_maybe
  disable_cache: false
  main: |
    from maybe import Maybe, Some, Nothing, is_some, is_nothing

    maybe = Some(1)
    nothing = Nothing()
    if is_some(maybe):
        reveal_type(maybe)  # N: Revealed type is "maybe.maybe.Some[builtins.int]"
    elif is_nothing(nothing):
        reveal_type(nothing)  # N: Revealed type is "maybe.maybe.Nothing"
